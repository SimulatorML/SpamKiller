import pandas as pd
from html import escape
from typing import Tuple, List
from aiogram import types, Bot
from loguru import logger
import asyncio

def extract_entities(message: types.Message) -> Tuple[str, str]:
    spoiler_link = ""
    if message.entities:
        for entity in message.entities:
            if entity.type == "text_link":
                spoiler_link = " " + entity.url + " " or ""
                break

    hidden_link = ""
    if message.caption_entities:
        for entity in message.caption_entities:
            if entity.type == "text_link":
                hidden_link = " " + entity.url + " " or ""

    return spoiler_link, hidden_link

def build_data_frame(
    text: str, bio: str, from_id: int, photo, reply_to_message_id, channel: str
) -> pd.DataFrame:
    data = {
        "text": [text],
        "bio": [bio],
        "from_id": [from_id],
        "photo": [photo],
        "reply_to_message_id": [reply_to_message_id],
        "channel": [channel],
    }
    data = pd.DataFrame(data)
    return data

async def classify_message(
    X: pd.DataFrame,
    gpt_classifier,
    rule_based_classifier,
    THRESHOLD_RULE_BASED: float,
    admins: List[int],
    WHITELIST_ADMINS: List[int],
    WHITELIST_USERS: List[int],
) -> dict:
    text = X.iloc[0, :].text
    user_id = X.iloc[0, :].from_id
    score = 0.0

    msg_features = {"label": None, "reasons": None, "model_name": "None",
                    "score": 0.0, "time_spent": 0.0, "prompt_name": "None",
                    "prompt_tokens": 0, 'completion_tokens': 0
                    }

    if user_id in admins or user_id in WHITELIST_ADMINS:
        msg_features["label"] = 0
        msg_features["reasons"] = "–ü–æ—è—Å–Ω–µ–Ω–∏–µ: –ê–¥–º–∏–Ω–æ–≤ –Ω–µ–ª—å–∑—è —Ç—Ä–æ–≥–∞—Ç—å. –û–Ω–∏ —Ö–æ—Ä–æ—à–∏–µ"
        return msg_features

    if user_id in WHITELIST_USERS:
        msg_features["label"] = 0
        msg_features["reasons"] = "–ü–æ—è—Å–Ω–µ–Ω–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ"
        return msg_features

    if not text:
        msg_features["label"] = 0
        msg_features["reasons"] = "–ü–æ—è—Å–Ω–µ–Ω–∏–µ: –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"
        return msg_features

    msg_features["model_name"] = "GptSpamClassifier"
    response = await gpt_classifier.predict(X)
    response = response[0]
    logger.info(response)
    keys = ['label', 'reasons', 'prompt_tokens', 'completion_tokens', 'time_spent', 'prompt_name']
    for key, value in zip(keys, response.values()):
        msg_features[key] = value

    if msg_features['label'] is None:
        msg_features['model_name'] = "RuleBasedClassifier"
        score, reasons = rule_based_classifier.predict(X)
        msg_features['score'] = score
        msg_features['reasons'] = "–ü—Ä–∏—á–∏–Ω—ã:\n" + reasons
        
        # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç—Ä–µ—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if score == 2:  # –¢–æ—á–Ω–æ —Å–ø–∞–º
            msg_features['label'] = 2
        elif score == 1:  # –í–æ–∑–º–æ–∂–Ω–æ —Å–ø–∞–º
            msg_features['label'] = 1
        else:  # –ù–µ —Å–ø–∞–º
            msg_features['label'] = 0

    return msg_features

async def send_spam_alert(
    bot: Bot,
    message: types.Message,
    label: int,
    reasons: str,
    text: str,
    prompt_name: str,
    model_name: str,
    score: float,
    time_spent: float,
    prompt_tokens: int,
    completion_tokens: int,
    photo,
    user_description: str,
    GROUP_CHAT_ID: int,
    ADMIN_IDS: List[int],
    TARGET_SPAM_ID: int,
    TARGET_NOT_SPAM_ID: int,
    WHITELIST_USERS: List[int] = None,
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ø–∞–º–µ –∏ —É–¥–∞–ª—è–µ—Ç —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è.
    –°–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª—è—é—Ç—Å—è –¥–ª—è –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–∫–ª—é—á–∞—è —Ç–µ—Ö, –∫—Ç–æ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∞–º–æ–º (label >= 1)
        if label >= 1:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
                bot_member = await bot.get_chat_member(message.chat.id, bot.id)
                if not bot_member.can_delete_messages:
                    logger.error(f"Bot doesn't have permission to delete messages in chat {message.chat.id}")
                    return

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=message.message_id
                )

                # –õ–æ–≥–∏—Ä—É–µ–º —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                is_whitelisted = WHITELIST_USERS and message.from_user.id in WHITELIST_USERS
                
                if is_whitelisted:
                    logger.warning(
                        f"Deleted spam message {message.message_id} from whitelisted user {message.from_user.id}. "
                        f"Spam score: {score}, Label: {label}"
                    )
                else:
                    logger.info(
                        f"Deleted spam message {message.message_id} from user {message.from_user.id}. "
                        f"Spam score: {score}, Label: {label}"
                    )

                    # –ë–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
                    # 1. –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ—á–Ω–æ —Å–ø–∞–º (label == 2)
                    # 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—á–Ω–æ –ù–ï –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
                    if label == 2
                        try:
                            await bot.ban_chat_member(
                                chat_id=message.chat.id,
                                user_id=message.from_user.id
                            )
                            logger.info(f"Banned user {message.from_user.id} for spam")
                        except Exception as e:
                            logger.error(f"Failed to ban user {message.from_user.id}: {e}")

            except Exception as e:
                logger.error(f"Failed to process spam message {message.message_id}: {e}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        spam_message = _build_spam_message(
            message=message,
            label=label,
            text=text,
            user_description=user_description,
            model_name=model_name,
            prompt_name=prompt_name,
            time_spent=time_spent,
            reasons=reasons,
            score=score,
            is_whitelisted=WHITELIST_USERS and message.from_user.id in WHITELIST_USERS
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö –¥–ª—è GPT
        if model_name == 'GptSpamClassifier':
            spam_message += (
                f"\n\nPrompt tokens: {prompt_tokens}\n"
                f"Completion tokens: {completion_tokens}"
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        sent_to = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ID, –∫—É–¥–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        tasks = []

        # –í –æ–±—â–∏–π —á–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–≥–¥–∞
        if GROUP_CHAT_ID not in sent_to:
            tasks.append(send_message_or_photo(bot, GROUP_CHAT_ID, spam_message, photo))
            sent_to.add(GROUP_CHAT_ID)

        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –∏–º –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
        for admin_id in ADMIN_IDS:
            if admin_id not in sent_to:
                tasks.append(send_message_or_photo(bot, admin_id, spam_message, photo))
                sent_to.add(admin_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
        target_id = TARGET_SPAM_ID if label >= 1 else TARGET_NOT_SPAM_ID
        if target_id not in sent_to:
            tasks.append(send_message_or_photo(bot, target_id, spam_message, photo))

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        await asyncio.gather(*tasks)

    except Exception as e:
        logger.error(f"Error in send_spam_alert: {e}")

async def send_message_or_photo(bot: Bot, chat_id: int, text: str, photo) -> None:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑"""
    try:
        if photo:
            await bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=text,
                parse_mode="HTML"
            )
        else:
            await bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"Failed to send message to {chat_id}: {e}")

def _build_spam_message(
    message: types.Message,
    label: int,
    text: str,
    user_description: str,
    model_name: str,
    prompt_name: str,
    time_spent: float,
    reasons: str,
    score: float,
    is_whitelisted: bool = False,
) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ÔøΩÔøΩ —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    if label == 2:
        label_text = "üö® <b>SPAM DETECTED (High confidence)</b>"
    elif label == 1:
        label_text = "‚ö†Ô∏è <b>Possible SPAM</b>"
    else:
        label_text = "‚úÖ <i>No spam detected</i>"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
    whitelist_status = "‚≠êÔ∏è [Whitelisted user]" if is_whitelisted else ""

    score_text = (
        f"<b>({round(score * 100, 2)}%)</b>"
        if model_name == "RuleBasedClassifier"
        else ""
    )

    # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    MAX_TEXT_LENGTH = 600
    if text and len(text) > MAX_TEXT_LENGTH:
        text = text[:MAX_TEXT_LENGTH] + "..."

    return (
        f"{label_text} {score_text} {whitelist_status}\n"
        f"–ö–∞–Ω–∞–ª: <a href='t.me/{message.chat.username}'>{message.chat.title}</a>\n"
        f"–ê–≤—Ç–æ—Ä: @{message.from_user.username or 'None'}\n"
        f"User_id: {message.from_user.id}\n"
        f"–í—Ä–µ–º—è: {message.date}\n\n"
        f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
        '"""\n'
        f"{escape(text)}\n"
        '"""\n\n'
        f"–û–ø–∏—Å–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞:\n"
        f"{'-' * 10}\n"
        f"{escape(user_description)}\n"
        f"{'-' * 10}\n\n"
        f"Model: {model_name}\n"
        f"Prompt: {prompt_name}\n"
        f"Time spent: {time_spent:.2f} seconds\n\n"
        f"{reasons}"
    )

